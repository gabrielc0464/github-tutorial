{"name":"GitHub Tutorial","tagline":"My Project","body":"# GitHub Tutorial\r\n\r\nby *Gabriel Charriez*\r\n\r\n---\r\n## Git vs. GitHub\r\n**Git**: is Version Control which lets you see and keep track of the changes  \r\n  you made to your files\r\n  \r\n**Github**: the same as Git but you can collaborate with others and they can also make changes to your code  \r\n  if you allow them to.  \r\n    Github needs Git but Git doesnt need Github\r\n  \r\n    \r\n\r\n\r\n\r\n\r\n---\r\n## Initial Setup\r\n1. Go to the [Github Website](http://www.github.com) and click signup. \r\n2. Make sure to click the free plan when you see it.  \r\n3. After you sign in you click on the profile icon on the top right\r\n4. Click settings then click SSH Keys\r\n5. Click add SSH key and then go to your nitrous\r\n6. Click your username then go to dashbaord\r\n7. Click the SSH keys tab then copy the SSH key to Github\r\n8. Add SSH Key\r\n9. Go to your nitrous tab then type ssh -T git@github.com then type yes\r\n10.  type in git config in nitrous \r\n11. Type in global user.name and in quotes type in you name\r\n12. Type in global user.email and in quotes type in your email address\r\n\r\nWhat git config does is that it makes you type in your user name and email so that it can use that information when you \r\nmake commits. If its your first time using git it will make you do this.\r\n\r\n\r\n\r\n\r\n\r\n\r\n---\r\n## Repository Setup\r\nFirst you make a directory called first repo then cd into it. Then create a README.md file.\r\nTo start using git commands besides git commit you must type git init. What this does is that it\r\ncreates a repository and whatever directory you are in. To set up your repo you must go to github and\r\nin the top-right click the plus and click new repository. The name of the repo must **ALWAYS**\r\nmatch the name of your repo on c9. Click on the ssh button and then copy and paste the lines of code that you \r\nsee under \"... or push an existing repository from the command line\". Make sure to paste them one at a time in\r\nthe command line.  \r\n\r\nTo check if the repository is working do the git add, commit and push commands. These commands\r\nwill be explained in the next section.\r\n\r\n\r\n\r\n---\r\n## Workflow & Commands\r\n###Git status: \r\nOne of the most important git commands. What this does is that it tells you if you\r\nhave any files that can were modified and can be added or commited. This is important because you \r\ncan see where you are in your workflow. The way you write it in the command line is \"git status\"\r\n\r\n### Git add:\r\nWhat git add does is that it it puts your file that you modified on the stage so that it can be commited.\r\nThe stage is an imaginary place where files can be commited. The way you write it is \"git add \"name of file\".\r\n \r\n### Git commit: \r\nWhat this does is that it takes a snapshot of your code so that you know what changes you made\r\nto that file. If you did something wrong you can revert to the previous version. This also lets you push\r\nyour commit to your remote repo. The way you type this is git commit -m \"what you changed\". What the -m does is\r\nthat it lets you type a message so you know what change you made. The message must also always be in present tense.\r\n\r\n### Git push:\r\nWhat git push does is that it literally pushes your commit to the remote repo. Whatever you did\r\nin the commit is what will show in the remote repo. git push is the command. You dont have to type in\r\norigin master because its a one time thing.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}